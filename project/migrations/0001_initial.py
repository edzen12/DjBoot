# Generated by Django 4.2.19 on 2025-04-04 12:57

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Фото')),
                ('description', django_ckeditor_5.fields.CKEditor5Field()),
                ('author', models.CharField(max_length=100, verbose_name='Автор')),
                ('date_post', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Блог',
                'verbose_name_plural': 'Блог',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Категории книг',
                'verbose_name_plural': 'Категории книг',
            },
        ),
        migrations.CreateModel(
            name='Instructors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя фамилие')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Фото ава')),
                ('position', models.CharField(max_length=100, verbose_name='Должность')),
                ('description', django_ckeditor_5.fields.CKEditor5Field()),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Инструкторы',
                'verbose_name_plural': 'Инструкторы',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название сайта')),
                ('logo', models.ImageField(upload_to='images', verbose_name='Лого')),
                ('phone1', models.CharField(help_text='Вы можете начать номер телефона с +996 (700) 700 700', max_length=20, verbose_name='Телефон')),
                ('phone2', models.CharField(blank=True, help_text='Вы можете начать номер телефона с +996 (500) 700 700', max_length=20, null=True, verbose_name='Телефон')),
                ('email', models.CharField(max_length=100, verbose_name='E-mail')),
                ('email2', models.CharField(blank=True, max_length=100, null=True, verbose_name='E-mail')),
                ('address', models.CharField(max_length=255, null=True, verbose_name='Адрес')),
                ('map', models.TextField(null=True, verbose_name='карта')),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Настройки',
            },
        ),
        migrations.CreateModel(
            name='SocialLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название соцсети')),
                ('link', models.CharField(max_length=255, verbose_name='ссылка')),
                ('image', models.CharField(max_length=255, verbose_name='ссылка на лого')),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='project.instructors')),
            ],
            options={
                'verbose_name': 'Соц.сеть',
                'verbose_name_plural': 'Соц.сеть',
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='фио')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='Email')),
                ('desc', models.TextField(verbose_name='Описание')),
                ('rating', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Рейтинг')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата и время создания')),
                ('blog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='project.blog', verbose_name='Блог')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='project.reviews', verbose_name='Блог')),
            ],
            options={
                'verbose_name': 'Отзывы',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Фото')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
                ('count_lections', models.CharField(help_text='12 лекции', max_length=100, verbose_name='Количество лекции')),
                ('hours', models.CharField(max_length=20, verbose_name='Сколько часов')),
                ('description', django_ckeditor_5.fields.CKEditor5Field()),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('instructors', models.ManyToManyField(blank=True, to='project.instructors', verbose_name='Инструктор')),
            ],
            options={
                'verbose_name': 'Курсы',
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('author', models.CharField(max_length=100, verbose_name='Имя Автора')),
                ('image', models.CharField(blank=True, help_text='вставьте ссылку', max_length=255, null=True, verbose_name='Фото')),
                ('desc', models.TextField(verbose_name='Описание')),
                ('Page_Count', models.CharField(blank=True, max_length=100, null=True, verbose_name='количество страниц')),
                ('Word_Count', models.CharField(blank=True, max_length=100, null=True, verbose_name='год')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.category', verbose_name='категория')),
            ],
            options={
                'verbose_name': 'книга',
                'verbose_name_plural': 'Книги',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
